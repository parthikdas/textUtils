{"version":3,"sources":["components/About.js","components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","useState","color","backgroundColor","myStyle","setMyStyle","btnText","setBtnText","className","style","id","type","onClick","Navbar","props","mode","to","name","about","display","buttonColorFunc","toggleMode","htmlFor","TextForm","substrCount","search","i","n","text","indexOf","setText","heading","value","onChange","event","target","rows","buttonColor","newText","toUpperCase","showAlert","toLowerCase","charAt","slice","split","length","join","navigator","clipboard","writeText","defaultProps","Alert","alert","class","role","word","lower","capitalize","msg","App","setMode","setAlert","message","setTimeout","setButtonColor","Blue","document","body","Green","Red","Yellow","Black","title","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.21ae88b5.chunk.js","sourcesContent":["import React, {useState} from \"react\";\n\nexport default function About() {\n    const [myStyle, setMyStyle] = useState({\n        color : \"black\",\n        backgroundColor : \"white\"\n    })\n    const [btnText, setBtnText] = useState(\"Enable Dark Mode\")\n    const toggleStyle = () => {\n        if(myStyle.color === \"white\"){\n            setMyStyle({\n                color : \"black\",\n                backgroundColor : \"white\"\n            })\n            setBtnText(\"Enable Dark mode\")\n        } else {\n            setMyStyle({\n                color : \"white\",\n                backgroundColor : \"black\"\n            })\n            setBtnText(\"Enable Light mode\")\n        }\n    }\n  return (\n    <div className=\"container\" style={myStyle}>\n      <h1 className=\"my-3\">About us</h1>\n      <div className=\"accordion\" id=\"accordionExample\">\n        <div className=\"accordion-item\">\n          <h2 className=\"accordion-header\" id=\"headingOne\">\n            <button\n              className=\"accordion-button\"\n              type=\"button\"\n              data-bs-toggle=\"collapse\"\n              data-bs-target=\"#collapseOne\"\n              aria-expanded=\"true\"\n              aria-controls=\"collapseOne\"\n              style={myStyle}>\n              Accordion Item #1\n            </button>\n          </h2>\n          <div\n            id=\"collapseOne\"\n            className=\"accordion-collapse collapse show\"\n            aria-labelledby=\"headingOne\"\n            data-bs-parent=\"#accordionExample\">\n            <div className=\"accordion-body\" style={myStyle}>\n              <strong>This is the first item's accordion body.</strong> It is\n              shown by default, until the collapse plugin adds the appropriate\n              classNamees that we use to style each element. These classNamees control\n              the overall appearance, as well as the showing and hiding via CSS\n              transitions. You can modify any of this with custom CSS or\n              overriding our default variables. It's also worth noting that just\n              about any HTML can go within the <code>.accordion-body</code>,\n              though the transition does limit overflow.\n            </div>\n          </div>\n        </div>\n        <div className=\"accordion-item\"  style={myStyle}>\n          <h2 className=\"accordion-header\" id=\"headingTwo\">\n            <button\n              className=\"accordion-button collapsed\"\n              type=\"button\"\n              data-bs-toggle=\"collapse\"\n              data-bs-target=\"#collapseTwo\"\n              aria-expanded=\"false\"\n              aria-controls=\"collapseTwo\"\n              style={myStyle}\n            >\n              Accordion Item #2\n            </button>\n          </h2>\n          <div\n            id=\"collapseTwo\"\n            className=\"accordion-collapse collapse\"\n            aria-labelledby=\"headingTwo\"\n            data-bs-parent=\"#accordionExample\">\n            <div className=\"accordion-body\">\n              <strong>This is the second item's accordion body.</strong> It is\n              hidden by default, until the collapse plugin adds the appropriate\n              classNamees that we use to style each element. These classNamees control\n              the overall appearance, as well as the showing and hiding via CSS\n              transitions. You can modify any of this with custom CSS or\n              overriding our default variables. It's also worth noting that just\n              about any HTML can go within the <code>.accordion-body</code>,\n              though the transition does limit overflow.\n            </div>\n          </div>\n        </div>\n        <div className=\"accordion-item\">\n          <h2 className=\"accordion-header\" id=\"headingThree\">\n            <button\n              className=\"accordion-button collapsed\"\n              type=\"button\"\n              data-bs-toggle=\"collapse\"\n              data-bs-target=\"#collapseThree\"\n              aria-expanded=\"false\"\n              aria-controls=\"collapseThree\"\n              style={myStyle}>\n              Accordion Item #3\n            </button>\n          </h2>\n          <div\n            id=\"collapseThree\"\n            className=\"accordion-collapse collapse\"\n            aria-labelledby=\"headingThree\"\n            data-bs-parent=\"#accordionExample\"\n          >\n            <div className=\"accordion-body\" style={myStyle}>\n              <strong>This is the third item's accordion body.</strong> It is\n              hidden by default, until the collapse plugin adds the appropriate\n              classNamees that we use to style each element. These classNamees control\n              the overall appearance, as well as the showing and hiding via CSS\n              transitions. You can modify any of this with custom CSS or\n              overriding our default variables. It's also worth noting that just\n              about any HTML can go within the <code>.accordion-body</code>,\n              though the transition does limit overflow.\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"container my-3\">\n        <button type=\"button\" onClick={toggleStyle} className=\"btn btn-primary\" style={myStyle}>{btnText}</button>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport { Link } from \"react-router-dom\";\n\nexport default function Navbar(props) {\n  return (\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\n        <div className=\"container-fluid\">\n          <Link className=\"navbar-brand\" to=\"/\">{props.name}</Link>\n          <button\n            className=\"navbar-toggler\"\n            type=\"button\"\n            data-bs-toggle=\"collapse\"\n            data-bs-target=\"#navbarSupportedContent\"\n            aria-controls=\"navbarSupportedContent\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\">\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n              <li className=\"nav-item\">\n                <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\n              </li>\n              <li className=\"nav-item mx-2\">\n                <Link className=\"nav-link\" to=\"/about\">{props.about}</Link>\n              </li>\n            </ul>\n              <button type=\"button\" style= {{display: props.mode === 'dark'? 'block':'none'}} onClick ={props.buttonColorFunc['Blue']} className=\"btn btn-outline-primary mx-1 my-1\">Blue</button>\n              <button type=\"button\" style= {{display: props.mode === 'dark'? 'block':'none'}} onClick ={props.buttonColorFunc['Green']} className=\"btn btn-outline-success mx-1 my-1\">Green</button>\n              <button type=\"button\" style= {{display: props.mode === 'dark'? 'block':'none'}} onClick ={props.buttonColorFunc['Red']} className=\"btn btn-outline-danger mx-1 my-1\">Red</button>\n              <button type=\"button\" style= {{display: props.mode === 'dark'? 'block':'none'}} onClick ={props.buttonColorFunc['Yellow']} className=\"btn btn-outline-warning mx-1 my-1\">Yellow</button>\n              <button type=\"button\" style= {{display: props.mode === 'dark'? 'block':'none'}} onClick ={props.buttonColorFunc['Black']} className=\"btn btn-outline-light mx-1 my-1\">Black</button>\n            <div className={`form-check form-switch text-${props.mode === 'dark'? 'light': 'dark'}`}>\n              <input className=\"form-check-input mx-1\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\n            </div>\n          </div>\n        </div>\n      </nav>\n  );\n}\n\nNavbar.propTypes = {\n    name : PropTypes.string.isRequired,\n    about : PropTypes.string.isRequired\n}\n\nNavbar.defaultProps = {\n    name : 'Set title here',\n    about : 'About'\n}\n","import React, { useState } from 'react';\n\nexport default function TextForm(props) {\n    const substrCount = (search) => {\n        let i=0, n=0\n        while (true) {\n            i = text.indexOf(search, i);\n            if (i >= 0) {\n                n++;\n                i++;\n            } else break;\n        }\n        return n;\n    }\n    const handleUpClick = () => {\n        // console.log(\"Upper case\" + text)\n        let newText = text.toUpperCase()\n        setText(newText)\n        props.showAlert(\"Converted to upper case\", \"success\")\n    }\n    const handleLoClick = () => {\n        let newText = text.toLowerCase()\n        setText(newText)\n        props.showAlert(\"Converted to lower case\", \"success\")\n    }\n    const handleSeClick = () => {\n        let newText = text.toLowerCase()\n        newText = newText.charAt(0).toUpperCase() + newText.slice(1);\n        setText(newText)\n        props.showAlert(\"Converted to sentence case\", \"success\")\n    }\n    const handleTiClick = () =>{\n        let newText = text, i=0\n        newText = newText.split(\" \")\n        for(i=0;i<newText.length;i++) {\n            newText[i] = newText[i].charAt(0).toUpperCase() + newText[i].slice(1);\n        }\n        newText = newText.join(\" \")\n        setText(newText)\n        props.showAlert(\"Converted to title case\", \"success\")\n    }\n    const handleExtraSpaces = () => {\n        let newText = text.split(/[ ]+/);\n        setText(newText.join(\" \"))\n        props.showAlert(\"Extra spaces removed\", \"success\")\n    }\n    const handleCopy = () => {\n        navigator.clipboard.writeText(text)\n        props.showAlert(\"Copied to clipboard\", \"success\")\n    }\n    const handleClearClick = () => {\n        let newText = ''\n        setText(newText)\n        props.showAlert(\"Text cleared\", \"success\")\n    }\n    const handleOnChange = (event) => { // we get event when we use onChange\n        // console.log('on change')\n        setText(event.target.value)\n    }\n\n    const [text, setText] = useState('');\n    // text = \"new text\"; // Wrong way to change the state\n    // setText(\"new text\"); // Correct way to change the state\n    return (\n        <>\n        <div className=\"container\" style={{color: props.mode==='light'?'#042743':'white'}}>\n            <h1>{props.heading}</h1>\n            <div className=\"mb-3\">\n                <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='light'?'white':'grey', color: props.mode==='light'?'#042743':'white'}} id=\"myBox\" rows=\"8\"></textarea>\n                {/* if we did not used onChange here then further user couldnot provide input as value={text} is given*/}\n            </div>\n            <button className={`btn btn-${props.buttonColor} mx-2 my-2`} onClick={handleUpClick}>Convert to UPPERCASE</button>\n            <button className={`btn btn-${props.buttonColor} mx-2 my-2`} onClick={handleLoClick}>Convert to lowercase</button>\n            <button className={`btn btn-${props.buttonColor} mx-2 my-2`} onClick={handleSeClick}>Convert to Sentence case</button>\n            <button className={`btn btn-${props.buttonColor} mx-2 my-2`} onClick={handleTiClick}>Convert to Title Case</button>\n            <button className={`btn btn-${props.buttonColor} mx-2 my-2`} onClick={handleExtraSpaces}>Handle Extra Spaces</button>\n            <button className={`btn btn-${props.buttonColor} mx-2 my-2`} onClick={handleCopy}>Copy text</button>\n            <button className={`btn btn-${props.buttonColor} mx-2 my-2`} onClick={handleClearClick}>Clear Text</button>\n        </div>\n        <div className=\"container my-3\" style={{color: props.mode==='light'?'#042743':'white'}}>\n            <h2>Your text summary</h2>\n            <p>{text.length} characters(with spaces)</p>\n            <p>{text.length - substrCount(\" \")} characters(without spaces)</p>\n            <p>{text.split(\" \").length-1} words</p>\n            <p>{substrCount(\".\")} sentences</p>\n            <p>{0.008 * text.split(\" \").length} Minutes read</p> {/* 0.008 is googled number (1/125) */}\n            <h3>Preview</h3>\n            <p>{text.length>0? text:\"Enter something in textarea above to preview it here\"}</p>\n        </div>\n        </>\n    )\n}","import React from 'react'\n\nfunction Alert(props) {\n    const capitalize = (word) => {\n        let lower = word.toLowerCase();\n        lower =  lower.charAt(0).toUpperCase() + lower.slice(1);\n        return lower;\n    }\n    return (\n        // as in app.js props.alert was initially null so if they are not null then only put the alert\n        props.alert && <div class={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\"> \n            <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\n        </div>\n    )\n}\n\nexport default Alert\n","import React, { useState } from 'react';\nimport './App.css';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\") // for mode\n  const [alert, setAlert] = useState(null) // for alert\n  const showAlert = (message, type) => {\n    setAlert({\n      msg : message,\n      type : type\n    })\n    setTimeout(()=>{ // After 2 sec remove the alert\n      setAlert(null)\n    }, 1500)\n  }\n  const [buttonColor, setButtonColor] = useState('primary')// for button color\n  // For different themes\n  const buttonColorFunc = {\n    Blue : function () {\n    document.body.style.backgroundColor = '#042743';\n    setButtonColor('primary')\n    showAlert('Blue colour enabled', 'success')\n  }, Green : function () {\n    document.body.style.backgroundColor = 'rgb(1,75,1)';\n    setButtonColor('success')\n    showAlert('Green colour enabled', 'success')\n  }, Red : function () {\n    document.body.style.backgroundColor = 'rgb(87,0,0)';\n    setButtonColor('danger')\n    showAlert('Red colour enabled', 'success')\n  }, Yellow : function () {\n    document.body.style.backgroundColor = 'rgb(133,136,0)';\n    setButtonColor('warning')\n    showAlert('Yellow colour enabled', 'success')\n  }, Black : function () {\n    document.body.style.backgroundColor = 'rgb(37,37,36)';\n    setButtonColor('light')\n    showAlert('Black colour enabled', 'success')\n  }};\n  // Toggel mode\n  const toggleMode = () => {\n    if(mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark Mode has been enabled\", \"success\")\n      document.title = \"TextUtils - Dark Mode\" // u can dynamically update title butdont do it unless its like facebook showing how many messages are there, it shows like facebook(10)\n      // dont do this, this is just for knowledge\n      // setInterval(() => {\n      //   document.title = \"TextUtils is amazing mode\"\n      // }, 2000);\n      // setInterval(() => {\n      //   document.title = \"install TextUtils Now\"\n      // }, 1500);\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = 'white';\n      setButtonColor('primary')\n      showAlert(\"Light Mode has been enabled\", \"success\")\n      document.title = \"TextUtils - Light Mode\"\n    }\n  }\n  return (\n    <>\n      {/* <Navbar name=\"TextUtils\" about=\"About textUtils\"/> */}\n      <Router>\n      <Navbar name='TextUtils' mode={mode} toggleMode={toggleMode} showAlert={showAlert} buttonColorFunc={buttonColorFunc}/>\n      <Alert alert={alert}/>\n      <div className=\"container my-3\">\n      <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          <Route exact path=\"/\">\n          <TextForm heading='Enter the text to analyze' mode={mode} showAlert={showAlert} buttonColor={buttonColor}/>\n          </Route>\n        </Switch>\n      </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}