{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","name","type","id","style","display","onClick","buttonColorFunc","toggleMode","htmlFor","TextForm","substrCount","search","i","n","text","indexOf","useState","setText","color","heading","value","onChange","event","target","backgroundColor","rows","buttonColor","newText","toUpperCase","showAlert","toLowerCase","charAt","slice","split","length","join","navigator","clipboard","writeText","defaultProps","about","Alert","alert","class","role","word","lower","capitalize","msg","App","setMode","setAlert","message","setTimeout","setButtonColor","Blue","document","body","Green","Red","Yellow","Black","title","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e2d3da7d.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from 'prop-types';\n// import { Link } from \"react-router-dom\";\n\nexport default function Navbar(props) {\n  return (\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\n        <div className=\"container-fluid\">\n          {/* <Link className=\"navbar-brand\" to=\"/\">{props.name}</Link> */}\n          <a className=\"navbar-brand\" href=\"#\">{props.name}</a>\n          <button\n            className=\"navbar-toggler\"\n            type=\"button\"\n            data-bs-toggle=\"collapse\"\n            data-bs-target=\"#navbarSupportedContent\"\n            aria-controls=\"navbarSupportedContent\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\">\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n              <li className=\"nav-item\">\n                {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\n              </li>\n              {/* <li className=\"nav-item mx-2\">\n                <Link className=\"nav-link\" to=\"/about\">{props.about}</Link>\n              </li> */}\n            </ul>\n              <button type=\"button\" style= {{display: props.mode === 'dark'? 'block':'none'}} onClick ={props.buttonColorFunc['Blue']} className=\"btn btn-outline-primary mx-1 my-1\">Blue</button>\n              <button type=\"button\" style= {{display: props.mode === 'dark'? 'block':'none'}} onClick ={props.buttonColorFunc['Green']} className=\"btn btn-outline-success mx-1 my-1\">Green</button>\n              <button type=\"button\" style= {{display: props.mode === 'dark'? 'block':'none'}} onClick ={props.buttonColorFunc['Red']} className=\"btn btn-outline-danger mx-1 my-1\">Red</button>\n              <button type=\"button\" style= {{display: props.mode === 'dark'? 'block':'none'}} onClick ={props.buttonColorFunc['Yellow']} className=\"btn btn-outline-warning mx-1 my-1\">Yellow</button>\n              <button type=\"button\" style= {{display: props.mode === 'dark'? 'block':'none'}} onClick ={props.buttonColorFunc['Black']} className=\"btn btn-outline-light mx-1 my-1\">Black</button>\n            <div className={`form-check form-switch text-${props.mode === 'dark'? 'light': 'dark'}`}>\n              <input className=\"form-check-input mx-1\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\n            </div>\n          </div>\n        </div>\n      </nav>\n  );\n}\n\nNavbar.propTypes = {\n    name : PropTypes.string.isRequired,\n    about : PropTypes.string.isRequired\n}\n\nNavbar.defaultProps = {\n    name : 'Set title here',\n    about : 'About'\n}\n","import React, { useState } from 'react';\n\nexport default function TextForm(props) {\n    const substrCount = (search) => {\n        let i=0, n=0\n        while (true) {\n            i = text.indexOf(search, i);\n            if (i >= 0) {\n                n++;\n                i++;\n            } else break;\n        }\n        return n;\n    }\n    const handleUpClick = () => {\n        // console.log(\"Upper case\" + text)\n        let newText = text.toUpperCase()\n        setText(newText)\n        props.showAlert(\"Converted to upper case\", \"success\")\n    }\n    const handleLoClick = () => {\n        let newText = text.toLowerCase()\n        setText(newText)\n        props.showAlert(\"Converted to lower case\", \"success\")\n    }\n    const handleSeClick = () => {\n        let newText = text.toLowerCase()\n        newText = newText.charAt(0).toUpperCase() + newText.slice(1);\n        setText(newText)\n        props.showAlert(\"Converted to sentence case\", \"success\")\n    }\n    const handleTiClick = () =>{\n        let newText = text, i=0\n        newText = newText.split(\" \")\n        for(i=0;i<newText.length;i++) {\n            newText[i] = newText[i].charAt(0).toUpperCase() + newText[i].slice(1);\n        }\n        newText = newText.join(\" \")\n        setText(newText)\n        props.showAlert(\"Converted to title case\", \"success\")\n    }\n    const handleExtraSpaces = () => {\n        let newText = text.split(/[ ]+/);\n        setText(newText.join(\" \"))\n        props.showAlert(\"Extra spaces removed\", \"success\")\n    }\n    const handleCopy = () => {\n        navigator.clipboard.writeText(text)\n        props.showAlert(\"Copied to clipboard\", \"success\")\n    }\n    const handleClearClick = () => {\n        let newText = ''\n        setText(newText)\n        props.showAlert(\"Text cleared\", \"success\")\n    }\n    const handleOnChange = (event) => { // we get event when we use onChange\n        // console.log('on change')\n        setText(event.target.value)\n    }\n\n    const [text, setText] = useState('');\n    // text = \"new text\"; // Wrong way to change the state\n    // setText(\"new text\"); // Correct way to change the state\n    return (\n        <>\n        <div className=\"container\" style={{color: props.mode==='light'?'#042743':'white'}}>\n            <h1>{props.heading}</h1>\n            <div className=\"mb-3\">\n                <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='light'?'white':'grey', color: props.mode==='light'?'#042743':'white'}} id=\"myBox\" rows=\"8\"></textarea>\n                {/* if we did not used onChange here then further user couldnot provide input as value={text} is given*/}\n            </div>\n            <button className={`btn btn-${props.buttonColor} mx-2 my-2`} onClick={handleUpClick}>Convert to UPPERCASE</button>\n            <button className={`btn btn-${props.buttonColor} mx-2 my-2`} onClick={handleLoClick}>Convert to lowercase</button>\n            <button className={`btn btn-${props.buttonColor} mx-2 my-2`} onClick={handleSeClick}>Convert to Sentence case</button>\n            <button className={`btn btn-${props.buttonColor} mx-2 my-2`} onClick={handleTiClick}>Convert to Title Case</button>\n            <button className={`btn btn-${props.buttonColor} mx-2 my-2`} onClick={handleExtraSpaces}>Handle Extra Spaces</button>\n            <button className={`btn btn-${props.buttonColor} mx-2 my-2`} onClick={handleCopy}>Copy text</button>\n            <button className={`btn btn-${props.buttonColor} mx-2 my-2`} onClick={handleClearClick}>Clear Text</button>\n        </div>\n        <div className=\"container my-3\" style={{color: props.mode==='light'?'#042743':'white'}}>\n            <h2>Your text summary</h2>\n            <p>{text.length} characters(with spaces)</p>\n            <p>{text.length - substrCount(\" \")} characters(without spaces)</p>\n            <p>{text.split(\" \").length-1} words</p>\n            <p>{substrCount(\".\")} sentences</p>\n            <p>{0.008 * text.split(\" \").length} Minutes read</p> {/* 0.008 is googled number (1/125) */}\n            <h3>Preview</h3>\n            <p>{text.length>0? text:\"Enter something in textarea above to preview it here\"}</p>\n        </div>\n        </>\n    )\n}","import React from 'react'\n\nfunction Alert(props) {\n    const capitalize = (word) => {\n        let lower = word.toLowerCase();\n        lower =  lower.charAt(0).toUpperCase() + lower.slice(1);\n        return lower;\n    }\n    return (\n        // as in app.js props.alert was initially null so if they are not null then only put the alert\n        props.alert && <div class={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\"> \n            <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\n        </div>\n    )\n}\n\nexport default Alert\n","import React, { useState } from 'react';\nimport './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\") // for mode\n  const [alert, setAlert] = useState(null) // for alert\n  const showAlert = (message, type) => {\n    setAlert({\n      msg : message,\n      type : type\n    })\n    setTimeout(()=>{ // After 2 sec remove the alert\n      setAlert(null)\n    }, 1500)\n  }\n  const [buttonColor, setButtonColor] = useState('primary')// for button color\n  // For different themes\n  const buttonColorFunc = {\n    Blue : function () {\n    document.body.style.backgroundColor = '#042743';\n    setButtonColor('primary')\n    showAlert('Blue colour enabled', 'success')\n  }, Green : function () {\n    document.body.style.backgroundColor = 'rgb(1,75,1)';\n    setButtonColor('success')\n    showAlert('Green colour enabled', 'success')\n  }, Red : function () {\n    document.body.style.backgroundColor = 'rgb(87,0,0)';\n    setButtonColor('danger')\n    showAlert('Red colour enabled', 'success')\n  }, Yellow : function () {\n    document.body.style.backgroundColor = 'rgb(133,136,0)';\n    setButtonColor('warning')\n    showAlert('Yellow colour enabled', 'success')\n  }, Black : function () {\n    document.body.style.backgroundColor = 'rgb(37,37,36)';\n    setButtonColor('light')\n    showAlert('Black colour enabled', 'success')\n  }};\n  // Toggel mode\n  const toggleMode = () => {\n    if(mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark Mode has been enabled\", \"success\")\n      document.title = \"TextUtils - Dark Mode\" // u can dynamically update title butdont do it unless its like facebook showing how many messages are there, it shows like facebook(10)\n      // dont do this, this is just for knowledge\n      // setInterval(() => {\n      //   document.title = \"TextUtils is amazing mode\"\n      // }, 2000);\n      // setInterval(() => {\n      //   document.title = \"install TextUtils Now\"\n      // }, 1500);\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = 'white';\n      setButtonColor('primary')\n      showAlert(\"Light Mode has been enabled\", \"success\")\n      document.title = \"TextUtils - Light Mode\"\n    }\n  }\n  return (\n    <>\n      {/* <Navbar name=\"TextUtils\" about=\"About textUtils\"/> */}\n      {/* <Router> */}\n      <Navbar name='TextUtils' mode={mode} toggleMode={toggleMode} showAlert={showAlert} buttonColorFunc={buttonColorFunc}/>\n      <Alert alert={alert}/>\n      <div className=\"container my-3\">\n      {/* <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          <Route exact path=\"/\"> */}\n          <TextForm heading='Enter the text to analyze' mode={mode} showAlert={showAlert} buttonColor={buttonColor}/>\n          {/* </Route>\n        </Switch> */}\n      </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}